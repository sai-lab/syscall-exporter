use std::collections::HashMap;

use lazy_static::lazy_static;

lazy_static! {
    pub static ref SYSCALLS: HashMap<u32, &'static str> = {
        let mut s = HashMap::new();
        s.insert(0, "read");
        s.insert(1, "write");
        s.insert(2, "open");
        s.insert(3, "close");
        s.insert(4, "stat");
        s.insert(5, "fstat");
        s.insert(6, "lstat");
        s.insert(7, "poll");
        s.insert(8, "lseek");
        s.insert(9, "mmap");
        s.insert(10, "mprotect");
        s.insert(11, "munmap");
        s.insert(12, "brk");
        s.insert(13, "rt_sigaction");
        s.insert(14, "rt_sigprocmask");
        s.insert(15, "rt_sigreturn");
        s.insert(16, "ioctl");
        s.insert(17, "pread64");
        s.insert(18, "pwrite64");
        s.insert(19, "readv");
        s.insert(20, "writev");
        s.insert(21, "access");
        s.insert(22, "pipe");
        s.insert(23, "select");
        s.insert(24, "sched_yield");
        s.insert(25, "mremap");
        s.insert(26, "msync");
        s.insert(27, "mincore");
        s.insert(28, "madvise");
        s.insert(29, "shmget");
        s.insert(30, "shmat");
        s.insert(31, "shmctl");
        s.insert(32, "dup");
        s.insert(33, "dup2");
        s.insert(34, "pause");
        s.insert(35, "nanosleep");
        s.insert(36, "getitimer");
        s.insert(37, "alarm");
        s.insert(38, "setitimer");
        s.insert(39, "getpid");
        s.insert(40, "sendfile");
        s.insert(41, "socket");
        s.insert(42, "connect");
        s.insert(43, "accept");
        s.insert(44, "sendto");
        s.insert(45, "recvfrom");
        s.insert(46, "sendmsg");
        s.insert(47, "recvmsg");
        s.insert(48, "shutdown");
        s.insert(49, "bind");
        s.insert(50, "listen");
        s.insert(51, "getsockname");
        s.insert(52, "getpeername");
        s.insert(53, "socketpair");
        s.insert(54, "setsockopt");
        s.insert(55, "getsockopt");
        s.insert(56, "clone");
        s.insert(57, "fork");
        s.insert(58, "vfork");
        s.insert(59, "execve");
        s.insert(60, "exit");
        s.insert(61, "wait4");
        s.insert(62, "kill");
        s.insert(63, "uname");
        s.insert(64, "semget");
        s.insert(65, "semop");
        s.insert(66, "semctl");
        s.insert(67, "shmdt");
        s.insert(68, "msgget");
        s.insert(69, "msgsnd");
        s.insert(70, "msgrcv");
        s.insert(71, "msgctl");
        s.insert(72, "fcntl");
        s.insert(73, "flock");
        s.insert(74, "fsync");
        s.insert(75, "fdatasync");
        s.insert(76, "truncate");
        s.insert(77, "ftruncate");
        s.insert(78, "getdents");
        s.insert(79, "getcwd");
        s.insert(80, "chdir");
        s.insert(81, "fchdir");
        s.insert(82, "rename");
        s.insert(83, "mkdir");
        s.insert(84, "rmdir");
        s.insert(85, "creat");
        s.insert(86, "link");
        s.insert(87, "unlink");
        s.insert(88, "symlink");
        s.insert(89, "readlink");
        s.insert(90, "chmod");
        s.insert(91, "fchmod");
        s.insert(92, "chown");
        s.insert(93, "fchown");
        s.insert(94, "lchown");
        s.insert(95, "umask");
        s.insert(96, "gettimeofday");
        s.insert(97, "getrlimit");
        s.insert(98, "getrusage");
        s.insert(99, "sysinfo");
        s.insert(100, "times");
        s.insert(101, "ptrace");
        s.insert(102, "getuid");
        s.insert(103, "syslog");
        s.insert(104, "getgid");
        s.insert(105, "setuid");
        s.insert(106, "setgid");
        s.insert(107, "geteuid");
        s.insert(108, "getegid");
        s.insert(109, "setpgid");
        s.insert(110, "getppid");
        s.insert(111, "getpgrp");
        s.insert(112, "setsid");
        s.insert(113, "setreuid");
        s.insert(114, "setregid");
        s.insert(115, "getgroups");
        s.insert(116, "setgroups");
        s.insert(117, "setresuid");
        s.insert(118, "getresuid");
        s.insert(119, "setresgid");
        s.insert(120, "getresgid");
        s.insert(121, "getpgid");
        s.insert(122, "setfsuid");
        s.insert(123, "setfsgid");
        s.insert(124, "getsid");
        s.insert(125, "capget");
        s.insert(126, "capset");
        s.insert(127, "rt_sigpending");
        s.insert(128, "rt_sigtimedwait");
        s.insert(129, "rt_sigqueueinfo");
        s.insert(130, "rt_sigsuspend");
        s.insert(131, "sigaltstack");
        s.insert(132, "utime");
        s.insert(133, "mknod");
        s.insert(134, "uselib");
        s.insert(135, "personality");
        s.insert(136, "ustat");
        s.insert(137, "statfs");
        s.insert(138, "fstatfs");
        s.insert(139, "sysfs");
        s.insert(140, "getpriority");
        s.insert(141, "setpriority");
        s.insert(142, "sched_setparam");
        s.insert(143, "sched_getparam");
        s.insert(144, "sched_setscheduler");
        s.insert(145, "sched_getscheduler");
        s.insert(146, "sched_get_priority_m");
        s.insert(147, "sched_get_priority_m");
        s.insert(148, "sched_rr_get_interva");
        s.insert(149, "mlock");
        s.insert(150, "munlock");
        s.insert(151, "mlockall");
        s.insert(152, "munlockall");
        s.insert(153, "vhangup");
        s.insert(154, "modify_ldt");
        s.insert(155, "pivot_root");
        s.insert(156, "_sysctl");
        s.insert(157, "prctl");
        s.insert(158, "arch_prctl");
        s.insert(159, "adjtimex");
        s.insert(160, "setrlimit");
        s.insert(161, "chroot");
        s.insert(162, "sync");
        s.insert(163, "acct");
        s.insert(164, "settimeofday");
        s.insert(165, "mount");
        s.insert(166, "umount2");
        s.insert(167, "swapon");
        s.insert(168, "swapoff");
        s.insert(169, "reboot");
        s.insert(170, "sethostname");
        s.insert(171, "setdomainname");
        s.insert(172, "iopl");
        s.insert(173, "ioperm");
        s.insert(174, "create_module");
        s.insert(175, "init_module");
        s.insert(176, "delete_module");
        s.insert(177, "get_kernel_syms");
        s.insert(178, "query_module");
        s.insert(179, "quotactl");
        s.insert(180, "nfsservctl");
        s.insert(181, "getpmsg");
        s.insert(182, "putpmsg");
        s.insert(183, "afs_syscall");
        s.insert(184, "tuxcall");
        s.insert(185, "security");
        s.insert(186, "gettid");
        s.insert(187, "readahead");
        s.insert(188, "setxattr");
        s.insert(189, "lsetxattr");
        s.insert(190, "fsetxattr");
        s.insert(191, "getxattr");
        s.insert(192, "lgetxattr");
        s.insert(193, "fgetxattr");
        s.insert(194, "listxattr");
        s.insert(195, "llistxattr");
        s.insert(196, "flistxattr");
        s.insert(197, "removexattr");
        s.insert(198, "lremovexattr");
        s.insert(199, "fremovexattr");
        s.insert(200, "tkill");
        s.insert(201, "time");
        s.insert(202, "futex");
        s.insert(203, "sched_setaffinity");
        s.insert(204, "sched_getaffinity");
        s.insert(205, "set_thread_area");
        s.insert(206, "io_setup");
        s.insert(207, "io_destroy");
        s.insert(208, "io_getevents");
        s.insert(209, "io_submit");
        s.insert(210, "io_cancel");
        s.insert(211, "get_thread_area");
        s.insert(212, "lookup_dcookie");
        s.insert(213, "epoll_create");
        s.insert(214, "epoll_ctl_old");
        s.insert(215, "epoll_wait_old");
        s.insert(216, "remap_file_pages");
        s.insert(217, "getdents64");
        s.insert(218, "set_tid_address");
        s.insert(219, "restart_syscall");
        s.insert(220, "semtimedop");
        s.insert(221, "fadvise64");
        s.insert(222, "timer_create");
        s.insert(223, "timer_settime");
        s.insert(224, "timer_gettime");
        s.insert(225, "timer_getoverrun");
        s.insert(226, "timer_delete");
        s.insert(227, "clock_settime");
        s.insert(228, "clock_gettime");
        s.insert(229, "clock_getres");
        s.insert(230, "clock_nanosleep");
        s.insert(231, "exit_group");
        s.insert(232, "epoll_wait");
        s.insert(233, "epoll_ctl");
        s.insert(234, "tgkill");
        s.insert(235, "utimes");
        s.insert(236, "vserver");
        s.insert(237, "mbind");
        s.insert(238, "set_mempolicy");
        s.insert(239, "get_mempolicy");
        s.insert(240, "mq_open");
        s.insert(241, "mq_unlink");
        s.insert(242, "mq_timedsend");
        s.insert(243, "mq_timedreceive");
        s.insert(244, "mq_notify");
        s.insert(245, "mq_getsetattr");
        s.insert(246, "kexec_load");
        s.insert(247, "waitid");
        s.insert(248, "add_key");
        s.insert(249, "request_key");
        s.insert(250, "keyctl");
        s.insert(251, "ioprio_set");
        s.insert(252, "ioprio_get");
        s.insert(253, "inotify_init");
        s.insert(254, "inotify_add_watch");
        s.insert(255, "inotify_rm_watch");
        s.insert(256, "migrate_pages");
        s.insert(257, "openat");
        s.insert(258, "mkdirat");
        s.insert(259, "mknodat");
        s.insert(260, "fchownat");
        s.insert(261, "futimesat");
        s.insert(262, "newfstatat");
        s.insert(263, "unlinkat");
        s.insert(264, "renameat");
        s.insert(265, "linkat");
        s.insert(266, "symlinkat");
        s.insert(267, "readlinkat");
        s.insert(268, "fchmodat");
        s.insert(269, "faccessat");
        s.insert(270, "pselect6");
        s.insert(271, "ppoll");
        s.insert(272, "unshare");
        s.insert(273, "set_robust_list");
        s.insert(274, "get_robust_list");
        s.insert(275, "splice");
        s.insert(276, "tee");
        s.insert(277, "sync_file_range");
        s.insert(278, "vmsplice");
        s.insert(279, "move_pages");
        s.insert(280, "utimensat");
        s.insert(281, "epoll_pwait");
        s.insert(282, "signalfd");
        s.insert(283, "timerfd_create");
        s.insert(284, "eventfd");
        s.insert(285, "fallocate");
        s.insert(286, "timerfd_settime");
        s.insert(287, "timerfd_gettime");
        s.insert(288, "accept4");
        s.insert(289, "signalfd4");
        s.insert(290, "eventfd2");
        s.insert(291, "epoll_create1");
        s.insert(292, "dup3");
        s.insert(293, "pipe2");
        s.insert(294, "inotify_init1");
        s.insert(295, "preadv");
        s.insert(296, "pwritev");
        s.insert(297, "rt_tgsigqueueinfo");
        s.insert(298, "perf_event_open");
        s.insert(299, "recvmmsg");
        s.insert(300, "fanotify_init");
        s.insert(301, "fanotify_mark");
        s.insert(302, "prlimit64");
        s.insert(303, "name_to_handle_at");
        s.insert(304, "open_by_handle_at");
        s.insert(305, "clock_adjtime");
        s.insert(306, "syncfs");
        s.insert(307, "sendmmsg");
        s.insert(308, "setns");
        s.insert(309, "getcpu");
        s.insert(310, "process_vm_readv");
        s.insert(311, "process_vm_writev");
        s.insert(312, "kcmp");
        s.insert(313, "finit_module");
        s.insert(314, "sched_setattr");
        s.insert(315, "sched_getattr");
        s.insert(316, "renameat2");
        s.insert(317, "seccomp");
        s.insert(318, "getrandom");
        s.insert(319, "memfd_create");
        s.insert(320, "kexec_file_load");
        s.insert(321, "bpf");
        s.insert(322, "execveat");
        s.insert(323, "userfaultfd");
        s.insert(324, "membarrier");
        s.insert(325, "mlock2");
        s.insert(326, "copy_file_range");
        s.insert(327, "preadv2");
        s.insert(328, "pwritev2");
        s.insert(329, "pkey_mprotect");
        s.insert(330, "pkey_alloc");
        s.insert(331, "pkey_free");
        s.insert(332, "statx");
        s.insert(333, "io_pgetevents");
        s.insert(334, "rseq");
        s.insert(424, "pidfd_send_signal");
        s.insert(425, "io_uring_setup");
        s.insert(426, "io_uring_enter");
        s.insert(427, "io_uring_register");
        s.insert(428, "open_tree");
        s.insert(429, "move_mount");
        s.insert(430, "fsopen");
        s.insert(431, "fsconfig");
        s.insert(432, "fsmount");
        s.insert(433, "fspick");
        s.insert(434, "pidfd_open");
        s.insert(435, "clone3");
        s.insert(437, "openat2");
        s.insert(438, "pidfd_getfd");
        s.insert(439, "faccessat2");
        s
    };
}

pub fn to_syscall_number(syscall_name: &str) -> Vec<u32> {
    SYSCALLS
        .iter()
        .filter(|(_, name)| *name == &syscall_name)
        .map(|(number, _)| *number)
        .collect()
}
